/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as languagesRouteImport } from './routes/(languages)/route'
import { Route as languagesIndexImport } from './routes/(languages)/index'
import { Route as languagesNotFoundImport } from './routes/(languages)/not-found'

// Create/Update Routes

const languagesRouteRoute = languagesRouteImport.update({
  id: '/(languages)',
  getParentRoute: () => rootRoute,
} as any)

const languagesIndexRoute = languagesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => languagesRouteRoute,
} as any)

const languagesNotFoundRoute = languagesNotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => languagesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(languages)': {
      id: '/(languages)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof languagesRouteImport
      parentRoute: typeof rootRoute
    }
    '/(languages)/not-found': {
      id: '/(languages)/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof languagesNotFoundImport
      parentRoute: typeof languagesRouteImport
    }
    '/(languages)/': {
      id: '/(languages)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof languagesIndexImport
      parentRoute: typeof languagesRouteImport
    }
  }
}

// Create and export the route tree

interface languagesRouteRouteChildren {
  languagesNotFoundRoute: typeof languagesNotFoundRoute
  languagesIndexRoute: typeof languagesIndexRoute
}

const languagesRouteRouteChildren: languagesRouteRouteChildren = {
  languagesNotFoundRoute: languagesNotFoundRoute,
  languagesIndexRoute: languagesIndexRoute,
}

const languagesRouteRouteWithChildren = languagesRouteRoute._addFileChildren(
  languagesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof languagesIndexRoute
  '/not-found': typeof languagesNotFoundRoute
}

export interface FileRoutesByTo {
  '/not-found': typeof languagesNotFoundRoute
  '/': typeof languagesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(languages)': typeof languagesRouteRouteWithChildren
  '/(languages)/not-found': typeof languagesNotFoundRoute
  '/(languages)/': typeof languagesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/not-found'
  fileRoutesByTo: FileRoutesByTo
  to: '/not-found' | '/'
  id: '__root__' | '/(languages)' | '/(languages)/not-found' | '/(languages)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  languagesRouteRoute: typeof languagesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  languagesRouteRoute: languagesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(languages)"
      ]
    },
    "/(languages)": {
      "filePath": "(languages)/route.tsx",
      "children": [
        "/(languages)/not-found",
        "/(languages)/"
      ]
    },
    "/(languages)/not-found": {
      "filePath": "(languages)/not-found.tsx",
      "parent": "/(languages)"
    },
    "/(languages)/": {
      "filePath": "(languages)/index.tsx",
      "parent": "/(languages)"
    }
  }
}
ROUTE_MANIFEST_END */
